#include "./stdc++.h"

using namespace std;

class Solution {
public:
	/*
	充分必要条件型的题目
	想象我们在根据先序构建一颗树，只根据先序是左右不分的，后序的话其实就是反过来
	一开始我们会分配一个指针，这个指针我们准备让他指向一个跟节点，这样初始化的度数=1
	如果有一个not-null的节点过来，它首先会吃掉一个度数，然后提供两个出度，如果一个null节点过来
	那么它会吃掉一个节点，然后不提供任何出度，之后构建完整颗树，度数归零
	*/
    bool isValidSerialization2(string preorder) {
        string t = "";
        int degree = 1;
        for (int i = 0; i < preorder.length(); i++) {
            if (preorder[i] != ',') {
            	if (t == "") {
            		if (--degree < 0) return false;
            		if (preorder[i] != '#') {
            			degree += 2;
            		}
            	}
            	t.push_back(preorder[i]);
            } else {
            	t = "";
            }
        }
        return degree == 0;
    }
    /*
	一个元素，两个null节点构成一个叶子节点，所以可以用栈来判断
    */
    bool isValidSerialization(string preorder) {
        string t = "";
        int degree = 1;
        stack<char> st;
        for (int i = 0; i < preorder.length(); i++) {
            if (preorder[i] != ',') {
            	if (t == "") {
            		if (preorder[i] == '#') {
            			while (!st.empty() && st.top() == '#') {
            				st.pop();
            				if (st.empty()) return false;
            				st.pop(); 
            			}
            		}
            		st.push(preorder[i]);
            	}
            	t.push_back(preorder[i]);
            } else {
            	t = "";
            }
        }
        return st.size() == 1 && st.top() == '#';
    }
};

int main() {
	Solution *s = new Solution();
	cout << s->isValidSerialization("9,3,4,#,#,1,#,#,2,#,6,#,#") << endl; //1
	cout << s->isValidSerialization("9,#,92,#,#") << endl;//1
	cout << s->isValidSerialization("9,9,9,9,9,9,#,#,9,9,#,#,#,9,9,9,9,#,#,9,#,9,#,#,#,#,9,9,9,#,#,9,#,#,9,#,#,9,#,#,9,9,#,#,9,#,9,9,#,#,#") << endl;//1
	cout << s->isValidSerialization("#") << endl;//1
	cout << s->isValidSerialization("1,#") << endl;//0
	cout << s->isValidSerialization("1,#,#") << endl;//1
	cout << s->isValidSerialization("9,9,#,#,9,9,9,9,9,#,9,9,9,9,#,#,#,#,#,9,#,9,#,9,#,#,9,9,9,#,#,#,9,#,#,9,9,9,9,#,9,#,9,9,#,#,#,9,#,9,#,#,9,#,#,9,9,9,9,#,#,9,#,9,9,#,#,#,9,#,9,#,#,9,#,#,9,9,9,9,9,9,#,#,#,9,9,9,9,#,#,#,9,9,9,#,#,#,#,9,#,#,9,9,9,#,9,#,#,9,#,9,#,9,#,#,9,#,#,9,9,#,#,9,9,#,#,#,9,9,#,9,#,9,9,#,#,9,#,#,9,9,9,9,#,#,#,9,9,9,#,#,#,9,9,#,9,#,#,9,9,#,#,#,9,9,#,#,9,#,#") << endl;
	cout << s->isValidSerialization("9,9,9,9,#,9,#,#,9,#,9,9,#,9,#,#,#,9,9,9,9,9,9,#,#,#,9,9,9,#,#,9,9,#,#,9,#,#,#,9,9,9,9,#,9,#,#,9,9,#,9,9,9,#,#,#,#,9,9,#,#,9,#,#,9,9,9,#,#,#,9,#,9,9,#,#,9,#,9,#,#,#,9,9,9,9,9,#,#,9,9,#,9,9,9,#,9,#,#,9,#,#,#,#,9,9,#,9,9,9,9,9,#,#,9,#,#,9,9,#,#,#,#,9,9,9,#,#,#,9,#,#,9,9,9,9,9,#,#,9,9,#,#,#,#,9,9,9,#,#,9,#,#,#,9,9,#,#,9,#,9,#,9,#,#,#,9,9,9,9,#,#,#,9,9,9,9,9,#,#,#,9,9,#,9,#,9,#,#,9,9,#,#,9,#,#,9,#,#,9,#,9,#,#,9,9,9,9,9,9,#,#,9,9,9,#,#,9,#,#,9,9,9,#,#,9,#,9,#,9,#,#,9,#,9,#,#,#,9,#,9,#,#,9,9,#,#,9,9,9,#,#,#,9,9,#,#,#,#,9,9,9,9,#,#,9,9,#,#,#,9,9,9,#,9,#,#,9,#,#,9,9,9,#,#,#,#,9,9,#,#,9,#,#,9,9,9,9,9,#,#,9,9,#,#,9,#,#,9,9,9,9,9,#,#,#,9,#,9,#,9,9,#,#,#,9,9,9,#,#,9,#,#,#,9,9,9,#,#,9,9,9,9,#,#,#,9,#,#,9,#,9,9,#,#,9,9,#,#,#,9,#,#,9,9,9,9,9,9,9,9,9,9,9,#,9,#,#,9,#,#,9,9,#,#,9,#,9,#,9,#,#,9,#,#,9,9,9,9,#,#,9,#,#,9,9,#,#,9,9,#,#,9,#,#,#,9,9,#,9,9,#,9,9,#,#,9,#,#,9,9,#,9,#,#,#,#,9,9,9,9,#,#,#,9,9,#,#,#,#,9,#,#,9,#,9,9,9,#,#,9,9,9,9,#,#,9,#,#,9,9,#,#,9,#,#,9,9,9,#,#,#,9,#,#,9,#,9,#,9,9,#,#,#,#,9,9,9,9,#,#,#,9,9,9,9,#,9,9,9,#,#,9,#,#,#,9,9,9,#,9,#,9,#,#,#,9,#,#,9,#,9,#,#,9,9,9,9,9,9,#,#,9,9,#,9,#,#,#,9,9,9,#,#,#,9,9,9,#,#,9,#,9,#,#,#,9,9,9,#,#,#,9,9,#,#,9,#,9,#,#,9,#,#,9,9,9,9,#,#,#,9,#,9,#,#,9,9,9,#,#,#,9,9,#,#,9,#,#,9,9,9,9,#,#,9,#,9,9,#,9,9,9,#,#,#,#,9,#,#,9,9,9,9,9,9,#,9,#,9,9,#,#,#,#,9,9,#,#,#,9,#,#,9,9,#,9,#,#,#,#,9,9,#,#,#,9,9,9,#,9,#,9,9,#,#,#,9,9,#,9,9,#,#,#,9,#,#,9,9,#,9,#,9,#,#,9,#,9,#,#") << endl;
	return 0;
}