#include "./stdc++.h"

using namespace std;

class Solution {
public:
	map<pair<int, int>, bool> m;
    bool isValidSerialization(vector<char> &v, int start, int end) {
    	// cout << "start: " << start << " end: " << end << endl;
        if ((end - start + 1) <= 0) {
            return false;
        } else if ((end - start + 1) == 1) {
        	if (v[start] != '#') 
        		return false;
        	else 
        		return true;
        } else if ((end - start + 1) < 3) {
            return false;
        }
        if (v[start] == '#') {
            return false;
        }
        if (v[start + 1] == '#') {
            return isValidSerialization(v, start + 2, end);
        }
        for (int i = start + 1; i < end; i += 1) {
        	bool left, right;
        	pair<int, int> pl(start + 1, i), pr(i + 1, end);
        	left = m.count(pl) <= 0 ? isValidSerialization(v, start + 1, i) : m[pl];
        	m[pl] = left;
        	if (left) {
        		right = m.count(pr) <= 0 ? isValidSerialization(v, i + 1, end) : m[pr];
        		if (right) return true;
        	}
        }
        return false;
    }
    bool isValidSerialization(string preorder) {
        vector<char> v;
        string t = "";
        m.clear();
        for (int i = 0; i < preorder.length(); i++) {
            if (preorder[i] != ',') 
            	t.push_back(preorder[i]);
            else {
            	v.push_back(t[0]);
            	t = "";
            }
        }
        if (t != "") {
        	v.push_back(t[0]);
        }
        return isValidSerialization(v, 0, v.size() - 1);
    }
};

int main() {
	Solution *s = new Solution();
	cout << s->isValidSerialization("9,3,4,#,#,1,#,#,2,#,6,#,#") << endl; //1
	cout << s->isValidSerialization("9,#,92,#,#") << endl;//1
	cout << s->isValidSerialization("9,9,9,9,9,9,#,#,9,9,#,#,#,9,9,9,9,#,#,9,#,9,#,#,#,#,9,9,9,#,#,9,#,#,9,#,#,9,#,#,9,9,#,#,9,#,9,9,#,#,#") << endl;//1
	cout << s->isValidSerialization("#") << endl;//1
	cout << s->isValidSerialization("1,#") << endl;//0
	cout << s->isValidSerialization("1,#,#") << endl;//1
	cout << s->isValidSerialization("9,9,#,#,9,9,9,9,9,#,9,9,9,9,#,#,#,#,#,9,#,9,#,9,#,#,9,9,9,#,#,#,9,#,#,9,9,9,9,#,9,#,9,9,#,#,#,9,#,9,#,#,9,#,#,9,9,9,9,#,#,9,#,9,9,#,#,#,9,#,9,#,#,9,#,#,9,9,9,9,9,9,#,#,#,9,9,9,9,#,#,#,9,9,9,#,#,#,#,9,#,#,9,9,9,#,9,#,#,9,#,9,#,9,#,#,9,#,#,9,9,#,#,9,9,#,#,#,9,9,#,9,#,9,9,#,#,9,#,#,9,9,9,9,#,#,#,9,9,9,#,#,#,9,9,#,9,#,#,9,9,#,#,#,9,9,#,#,9,#,#") << endl;
	cout << s->isValidSerialization("9,9,9,9,#,9,#,#,9,#,9,9,#,9,#,#,#,9,9,9,9,9,9,#,#,#,9,9,9,#,#,9,9,#,#,9,#,#,#,9,9,9,9,#,9,#,#,9,9,#,9,9,9,#,#,#,#,9,9,#,#,9,#,#,9,9,9,#,#,#,9,#,9,9,#,#,9,#,9,#,#,#,9,9,9,9,9,#,#,9,9,#,9,9,9,#,9,#,#,9,#,#,#,#,9,9,#,9,9,9,9,9,#,#,9,#,#,9,9,#,#,#,#,9,9,9,#,#,#,9,#,#,9,9,9,9,9,#,#,9,9,#,#,#,#,9,9,9,#,#,9,#,#,#,9,9,#,#,9,#,9,#,9,#,#,#,9,9,9,9,#,#,#,9,9,9,9,9,#,#,#,9,9,#,9,#,9,#,#,9,9,#,#,9,#,#,9,#,#,9,#,9,#,#,9,9,9,9,9,9,#,#,9,9,9,#,#,9,#,#,9,9,9,#,#,9,#,9,#,9,#,#,9,#,9,#,#,#,9,#,9,#,#,9,9,#,#,9,9,9,#,#,#,9,9,#,#,#,#,9,9,9,9,#,#,9,9,#,#,#,9,9,9,#,9,#,#,9,#,#,9,9,9,#,#,#,#,9,9,#,#,9,#,#,9,9,9,9,9,#,#,9,9,#,#,9,#,#,9,9,9,9,9,#,#,#,9,#,9,#,9,9,#,#,#,9,9,9,#,#,9,#,#,#,9,9,9,#,#,9,9,9,9,#,#,#,9,#,#,9,#,9,9,#,#,9,9,#,#,#,9,#,#,9,9,9,9,9,9,9,9,9,9,9,#,9,#,#,9,#,#,9,9,#,#,9,#,9,#,9,#,#,9,#,#,9,9,9,9,#,#,9,#,#,9,9,#,#,9,9,#,#,9,#,#,#,9,9,#,9,9,#,9,9,#,#,9,#,#,9,9,#,9,#,#,#,#,9,9,9,9,#,#,#,9,9,#,#,#,#,9,#,#,9,#,9,9,9,#,#,9,9,9,9,#,#,9,#,#,9,9,#,#,9,#,#,9,9,9,#,#,#,9,#,#,9,#,9,#,9,9,#,#,#,#,9,9,9,9,#,#,#,9,9,9,9,#,9,9,9,#,#,9,#,#,#,9,9,9,#,9,#,9,#,#,#,9,#,#,9,#,9,#,#,9,9,9,9,9,9,#,#,9,9,#,9,#,#,#,9,9,9,#,#,#,9,9,9,#,#,9,#,9,#,#,#,9,9,9,#,#,#,9,9,#,#,9,#,9,#,#,9,#,#,9,9,9,9,#,#,#,9,#,9,#,#,9,9,9,#,#,#,9,9,#,#,9,#,#,9,9,9,9,#,#,9,#,9,9,#,9,9,9,#,#,#,#,9,#,#,9,9,9,9,9,9,#,9,#,9,9,#,#,#,#,9,9,#,#,#,9,#,#,9,9,#,9,#,#,#,#,9,9,#,#,#,9,9,9,#,9,#,9,9,#,#,#,9,9,#,9,9,#,#,#,9,#,#,9,9,#,9,#,9,#,#,9,#,9,#,#") << endl;
	return 0;
}